swagger: "2.0"
info:
  description: "This API allows users to create custom team rosters full of unique players"
  version: "1.0.0"
  title: "RosterAPI"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "galligan1996@gmail.com"
basePath: "/v2"
tags:
- name: "player"
- name: "team"
schemes:
- "https"
- "http"
paths:
  /api/player:
    post:
      tags:
      - "player"
      summary: "Add a new player"
      description: "This route allows for users to pass in JSON objects in order to add a new player to the database"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Player object to be added to list of Player"
        required: true
        schema:
          $ref: "#/definitions/Player"
      responses:
        400:
          description: "Missing required properties(FirstName/LastName)"
    get:
      tags:
      - "player"
      summary: "Get all players"
      parameters:
      - name: "lastName"
        in: "query"
        description: "Ability to filter player by lastname"
        required: false
        type: "string"
      description: "Get a list of all players currently in database"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Player"
  /api/player/{id}:
    get:
      tags:
      - "player"
      summary: "Get player by Id"
      description: "Ability to get a single player based on their unique Id"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of player to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Player"
        400:
          description: "Id doesn't match player in database"
  /api/team:
    post:
      tags:
      - "team"
      summary: "Add a new team"
      description: "This route allows for users to pass in JSON objects in order to add a new team to the database"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Team object to be added to list of Teams"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        400:
          description: "Missing required properties(Name/Location)"
    get:
      tags:
      - "team"
      summary: "Get all teams"
      parameters:
      - name: "orderBy"
        in: "query"
        description: "Ability to filter team by Name or Location"
        required: false
        type: "string"
        enum: 
        - "Name"
        - "Location"
      description: "Get a list of all teams currently in database"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Team"
  /api/team/{id}:
    get:
      tags:
      - "team"
      summary: "Get team by Id"
      description: "Ability to get a single team based on its unique Id"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of team to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Invalid ID supplied"
  /api/team/{id}/players:
    get:
      tags:
      - "team"
      summary: "Get players on a specific team"
      description: "Ability to the roster of a team based on its specific id"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of team to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Player"
        400:
          description: "Invalid ID supplied"
  /api/team/{teamId}/player/{playerId}:
    put:
      tags:
      - "team"
      summary: "Add or Remove User player from team"
      description: "Ability to add or remove player from team."
      produces:
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "TeamId to add or remove player from"
        required: true
        type: "integer"
      - in: "path"
        name: "playerId"
        description: "PlayerId to be added or removed to team"
        type: "integer"
        required: true
      - name: "action"
        in: "query"
        description: "Specify action to be peformed(Add or Remove)"
        required: true
        type: "string"
        enum:
           - "Add"
           - "Remove"
      responses:
        400:
          description: "Invalid TeamId/PlayerId or Action Type"
  
    
    # DEFINITIONS
    
definitions:
  Team:
    type: "object"
    required:
     - "Name"
     - "Location"
    properties:
      id:
        type: "integer"
        format: "int64"
      Name:
        type: "string"
      Location:
        type: "string"
      PlayerCount:
        type: "integer"
  Player:
    type: "object"
    required:
     - "FirstName"
     - "LastName"
    properties:
      id:
        type: "integer"
        format: "int64"
      FirstName:
        type: "string"
      LastName:
        type: "string"
      teamId:
        type: "integer"